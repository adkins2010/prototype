apply plugin: 'jacoco'

ext {
    limits = [
            'branch'     : 0,
            'class'      : 0,
            'complexity' : 0,
            'instruction': 0,
            'line'       : 0,
            'method'     : 0,
    ]
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/reports/coverage"
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: jacocoExclusions)
        })
    }

    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")
        logger.lifecycle("")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { (it.'@type' == 'INSTRUCTION') }),
                'branch'     : percentage(counters.find { (it.'@type' == 'BRANCH') }),
                'line'       : percentage(counters.find { (it.'@type' == 'LINE') }),
                'class'      : percentage(counters.find { (it.'@type' == 'CLASS') }),
                'method'     : percentage(counters.find { (it.'@type' == 'METHOD') }),
                'complexity' : percentage(counters.find { (it.'@type' == 'COMPLEXITY') }),
        ]


        def failures = []
        def successes = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage:\t ${it.value}%, \t minimum is ${limit}%")
            }
            if (it.value >= limit) {
                successes.add("- ${it.key} coverage:\t ${it.value}%, \t minimum is ${limit}%")
            }
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else{
            logger.quiet("-------------- Passed Code Coverage Checks --------------------")
            successes.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
        }
    }
}

test.finalizedBy(project.tasks.jacocoTestReport)
check.dependsOn jacocoTestReport